class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        //只能向右或者向下，所以每个格子如果有路径，那么肯定是从上面或者是左边过来的，如果一个格子可以走，那么起点到它的路径数应该是上面的格子路径数+左边格子的路径数
        int height = obstacleGrid.size();
        if(height == 0)
            return 0;
        int width = obstacleGrid[0].size();
        vector<long> scrollList;
        bool haveObstical =  false;
        int i,j;
        for(j = 0;j < width;++j)//先记录第一排的情况
        {
            if(obstacleGrid[0][j] == 1)
                haveObstical = true;
            scrollList.push_back(haveObstical == false?1:0);
        }
        for(i = 1;i < height;++i)
        {
            for(j = 1,scrollList[0] = obstacleGrid[i][0] == 1?0:scrollList[0];j < width;++j)//设置第一个的值，如果是障碍物，则直接为0，否则则和上面一行一致
            {
                //如果自己是障碍，则设置为过来的可能为0
                if(obstacleGrid[i][j] == 1)
                    scrollList[j] = 0;
                else//等于左边的路径数 加 上面的路径数
                    scrollList[j] = scrollList[j - 1] + scrollList[j];
            }
        }
        return scrollList[width - 1];
    }
};
